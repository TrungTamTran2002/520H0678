CharLinkedList(): Hàm khởi tạo, gán head = null.

getHead(): Trả về head của danh sách liên kết.

addFirst(char data): Chèn một node mới với giá trị data vào đầu danh sách.

addAfterFirstKey(char data, char key): Chèn một node mới có giá trị data ngay sau node đầu tiên có giá trị key, trả về true nếu thành công, false nếu không tìm thấy key.

Ví dụ: Danh sách ['A', 'b', 'c'], gọi addAfterFirstKey('E', 'b') → Danh sách trở thành ['A', 'b', 'E', 'c'].

largestCharPosition(): Trả về vị trí của phần tử đầu tiên có giá trị ASCII lớn nhất.

Ví dụ: Danh sách ['A', 'b', 'c'], trả về 2 vì 'c' có giá trị ASCII lớn nhất.

Cài đặt đúng công thức đệ quy
A(n,k)=n∗A(n,k−1).

Sử dụng Stack để thực hiện các phép toán cộng và trừ trên mảng expression theo thuật toán:

Khởi tạo một Stack Stack<Integer>.

Duyệt qua từng phần tử của mảng expression:

Nếu phần tử là số, đẩy vào Stack.

Nếu phần tử là toán tử (+ hoặc -): lấy hai phần tử từ Stack, thực hiện phép toán và đẩy kết quả vào lại Stack.

Phần tử cuối cùng trong Stack là kết quả cuối cùng.

Ví dụ: Input ['3', '4', '+', '2', '1', '+', '-'] có các bước tính toán như sau:

public static boolean isNumber(String str) {
    return str.matches("0|([1-9][0-9]*)");
}